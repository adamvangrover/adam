#coder_agent.py
"""
This module defines the CoderAgent, a specialized agent responsible for
writing code to implement a single, well-defined task.
"""

from typing import Any, Dict
from core.agents.agent_base import AgentBase

class CoderAgent(AgentBase):
    """
    The CoderAgent takes a specific task from a plan and writes the
    Python code to implement it.
    """

    def __init__(self, config: Dict[str, Any], **kwargs):
        super().__init__(config, **kwargs)
        self.name = "CoderAgent"

    async def execute(self, task: Dict[str, Any]) -> Dict[str, str]:
        """
        Takes a task and returns the code to implement it.

        :param task: A dictionary describing the task, which should include
                     keys like 'description', 'file_path', and 'context'.
        :return: A dictionary containing the generated code and the file path.
        """
        file_path = task.get("file_path")
        task_description = task.get("description")

        # 1. Read existing file content if a path is provided
        existing_code = ""
        if file_path:
            try:
                # In a real scenario, the agent would have a tool to read files.
                # For this placeholder, we'll assume it can read the file.
                # existing_code = self.tools.read_file(file_path)
                existing_code = f"# Existing code from {file_path} would be here."
            except FileNotFoundError:
                existing_code = "# File not found. Creating a new file."

        # 2. Construct a detailed prompt for the LLM
        prompt = f"""
        You are an expert Python developer. Your task is to write code for the following requirement.
        
        **File Path:** {file_path}
        **Task Description:** {task_description}
        
        **Existing Code:**
        ```python
        {existing_code}
        ```

        Please provide only the new, complete code for the file. Do not include any explanations or markdown formatting.
        """

        # 3. Call the LLM (or a Semantic Kernel skill) to generate the code
        # In a real implementation, this would be an async call to the LLM.
        # generated_code = await self.run_semantic_kernel_skill("code_generation", "generate_python_code", {"prompt": prompt})
        generated_code = f"""
# Placeholder code generated by CoderAgent
# Task: {task_description}

def new_function():
    \"\"\"This is a new function.\"\"\"
    pass
"""
        
        # 4. Return the generated code and the path to write it to
        return {
            "file_path": file_path,
            "code": generated_code
        }

    def get_skill_schema(self) -> Dict[str, Any]:
        """
        Defines the skills of the CoderAgent.
        """
        schema = super().get_skill_schema()
        schema["skills"].append(
            {
                "name": "write_code",
                "description": "Writes Python code for a given task.",
                "parameters": [
                    {"name": "task", "type": "dict", "description": "The task to implement."}
                ]
            }
        )
        return schema

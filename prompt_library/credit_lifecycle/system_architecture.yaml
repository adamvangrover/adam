- title: "Define System Architecture"
  prompt: |
    **Objective:** Define the complete system architecture for a multi-agent AI system for credit analysis at {institution_name}.

    **Persona:** Act as a principal solutions architect with deep expertise in building secure, scalable, and auditable AI systems for financial services.

    **Core Requirements:**
    1.  **Modularity:** The system must be composed of independent, replaceable, and testable components.
    2.  **Scalability:** The architecture must handle a high volume of concurrent analyses and a large repository of documents and data.
    3.  **Security:** All data, especially personally identifiable information (PII) and material non-public information (MNPI), must be handled in accordance with financial industry best practices and regulations (e.g., GDPR, CCPA).
    4.  **Auditability:** Every action, decision, and data point generated by an agent must be logged and traceable to its source.

    **Architectural Components to Define:**

    1.  **Agent Hierarchy:**
        -   **Orchestrator Agent(s):** Define the roles and responsibilities of the master agent(s). How do they interpret user intent? How do they manage workflows?
        -   **Meta-Agents (Analysis Layer):** Specify a list of required meta-agents (e.g., CreditRiskAssessmentAgent, PortfolioMonitoringEWSAgent, NarrativeSummarizationAgent). Detail their primary analytical functions and the types of structured data they consume.
        -   **Sub-Agents (Data Layer):** Specify a list of required sub-agents for data acquisition (e.g., FinancialDocumentAgent, ComplianceKYCAgent, MarketAlternativeDataAgent, InternalSystemsAgent). Detail the specific external and internal data sources they interact with.

    2.  **Communication Bus:**
        -   Describe the mechanism for inter-agent communication (e.g., RabbitMQ, Redis Pub/Sub, gRPC).
        -   Define the message schema (e.g., JSON object with headers, payload, metadata).

    3.  **Knowledge Base:**
        -   Specify the type of database(s) to be used (e.g., Graph Database like Neo4j for relationships, Vector Database for semantic search, Relational Database for structured data).
        -   Define the high-level ontology (e.g., key entities like `Company`, `Loan`, `FinancialStatement`, and their relationships).

    4.  **Workflow Engine:**
        -   Describe how complex, multi-step workflows (e.g., a full credit underwriting process) are defined, executed, and monitored. Is this managed by the Orchestrator directly, or is a separate workflow engine like Apache Airflow used?

    5.  **User Interface (UI):**
        -   Describe the key components of the user interface where credit professionals will interact with the system.

    **Expected Output Format:**
    Provide the architecture definition as a structured Markdown document with the following sections:
    -   1.0 System Overview
    -   2.0 Agent Hierarchy
    -   3.0 Communication Bus
    -   4.0 Knowledge Base
    -   5.0 Workflow Engine
    -   6.0 User Interface
    -   7.0 Security and Compliance Considerations

- title: "Onboard New Agent"
  prompt: |
    **Objective:** Generate the necessary configuration and documentation to onboard a new agent into the existing multi-agent system.

    **Persona:** Act as a senior DevOps engineer responsible for maintaining the agent ecosystem.

    **Agent Details:**
    -   **Agent Name:** `{agent_name}`
    -   **Agent Type:** `{agent_type}` (Sub-Agent, Meta-Agent, or Orchestrator-Agent)
    -   **Agent Role & Responsibilities:** `{agent_role}`
    -   **Agent Capabilities & Skills:** `{agent_capabilities}`
    -   **Input Data Schema:** `{input_schema}` (Provide a JSON schema example)
    -   **Output Data Schema:** `{output_schema}` (Provide a JSON schema example)

    **Tasks to Perform:**

    1.  **Generate Configuration:** Create the YAML configuration block for the new agent that will be added to the `config/agents.yaml` file. Include persona, description, expertise, and any specific parameters the agent requires.
    2.  **Generate Agent Markdown Documentation:** Create a new `AGENTS.md` entry for the agent. This should detail its role, responsibilities, input/output schemas, and an example of how to use it.
    3.  **Generate Unit Test Stub:** Create a Python unit test stub for the new agent. The stub should include a basic test case structure and placeholder tests for its primary capabilities.

    **Expected Output Format:**
    Provide the output as a single structured JSON object with three keys: `yaml_config`, `markdown_docs`, and `python_test_stub`.

    **Example Output:**
    ```json
    {{
      "yaml_config": "...",
      "markdown_docs": "...",
      "python_test_stub": "..."
    }}
    ```

- title: "Define Data Governance Framework"
  prompt: |
    **Objective:** Establish a comprehensive data governance framework for the multi-agent credit analysis system.

    **Persona:** Act as a Chief Data Officer (CDO).

    **Key Areas to Address:**

    1.  **Data Ownership & Stewardship:**
        -   Define roles and responsibilities for data owners and stewards for key data domains (e.g., customer data, financial data, third-party data).
    2.  **Data Quality Management:**
        -   Establish data quality metrics (e.g., accuracy, completeness, timeliness).
        -   Describe the processes for data validation, cleansing, and enrichment.
    3.  **Data Lineage & Traceability:**
        -   Define the requirements for tracking data from its source to its final use in analysis and reports.
        -   How will the system log data transformations?
    4.  **Data Security & Access Control:**
        -   Define data classification levels (e.g., Public, Internal, Confidential, Restricted).
        -   Establish role-based access control (RBAC) policies for different user groups and agents.
    5.  **Data Retention & Archiving:**
        -   Define the policies for how long data should be retained and when it should be archived or deleted, in compliance with regulations like SOX and GDPR.

    **Expected Output Format:**
    A formal data governance policy document in Markdown format.

- title: "Create Security and Compliance Plan"
  prompt: |
    **Objective:** Create a detailed security and compliance plan for the multi-agent system.

    **Persona:** Act as a Chief Information Security Officer (CISO).

    **Plan Components:**

    1.  **Threat Model:**
        -   Identify potential threats to the system (e.g., data breaches, model poisoning, prompt injection, unauthorized access).
        -   Assess the likelihood and impact of each threat.
    2.  **Security Controls:**
        -   **Technical Controls:** Specify required technical controls (e.g., encryption at rest and in transit, network segmentation, intrusion detection systems).
        -   **Administrative Controls:** Specify administrative controls (e.g., security awareness training, access review procedures, incident response plan).
    3.  **Compliance Framework:**
        -   Map the system's features and controls to relevant regulations (e.g., SOX, GDPR, CCPA, AML/KYC regulations).
        -   Describe the process for conducting regular compliance audits.
    4.  **Incident Response Plan:**
        -   Outline the steps to be taken in the event of a security incident, from detection to resolution and post-mortem analysis.

    **Expected Output Format:**
    A formal security and compliance plan document in Markdown format.

- title: "Compare Architectural Patterns"
  prompt: |
    **Objective:** Analyze and compare two different architectural patterns for the multi-agent system and recommend the most suitable one.

    **Persona:** Act as a lead enterprise architect.

    **Architectural Patterns to Compare:**
    1.  **Monolithic Architecture:** A single, tightly integrated application containing all agent logic, workflow management, and data processing.
    2.  **Microservices Architecture:** A collection of small, independent services, where each agent or a small group of related agents runs as a separate service.

    **Evaluation Criteria:**
    For each architectural pattern, provide an analysis based on the following criteria:
    -   **Development Velocity & Team Autonomy:** How does the pattern affect the speed of development and the ability of different teams to work independently?
    -   **Scalability:** How easily can the system be scaled to handle increased load?
    -   **Resilience & Fault Tolerance:** How does the failure of one component affect the rest of the system?
    -   **Operational Complexity:** What are the challenges associated with deploying, monitoring, and maintaining the system?
    -   **Cost:** What are the likely infrastructure and operational costs associated with each pattern?

    **Recommendation:**
    -   Based on the analysis, provide a clear recommendation for the most suitable architectural pattern for the credit analysis system.
    -   Justify your recommendation with specific reference to the evaluation criteria.

    **Expected Output Format:**
    A structured comparison report in Markdown format.

## CLO Analyzer

| Input | Description | Example |
|---|---|---|
| CLO Tranches | Define the tranches within the CLO (e.g., Senior, Mezzanine, Equity) | Senior, Mezzanine 1, Mezzanine 2, Equity |
| Tranche Size | Amount of principal for each tranche | $200 million, $100 million, $50 million, $50 million |
| Tranche Coupon | Interest rate paid on each tranche | 4.5%, 6.0%, 8.0%, 12.0% |
| Underlying Assets | Portfolio of leveraged loans backing the CLO. List of loans with details (see below) |  | 
| Loan Details | For each loan:  - Principal amount  - Interest rate  - Credit rating  - Maturity date | $10 million, 8.0%, B2, 5 years |
| Default Assumptions | Probability of default for each loan | Based on credit ratings and historical data |
| Recovery Rate | Percentage of principal recovered in case of default | Based on historical recovery rates for similar loans |
| **Current Interest Rate** | Prevailing market interest rate | 3.5% |
| **Loan Cash Flows** | Calculated based on loan details and default assumptions | See Loan Amortization Schedule |
| **CLO Tranche Cash Flows** | Calculated based on loan cash flows and waterfall structure | See Tranche Cash Flow Waterfall |
| **Tranche Pricing** | Present value of tranche cash flows | See Tranche Pricing Calculation |
| **CLO Valuation** | Sum of present values of all tranches | $450 million |
| **CDS Pricing** | CDS spread for the underlying assets or CLO tranches | See CDS Pricing Model |
| **Mark-to-Market Valuation** | Current market value of the CLO | $475 million |
| **Risk Metrics** | Probability of default, loss given default, expected loss, tranche attachment and detachment points | See Risk Metrics Dashboard |
| **Developer Notes** | Formulas, future integrations, output formats | See Developer Notes Section |

## Loan Amortization Schedule

| Loan ID | Principal | Interest Rate | Maturity | Payment | Remaining Balance |
|---|---|---|---|---|---|
| Loan 1 | $10 million | 8.0% | 5 years | $200,000 | $9.8 million |
| Loan 2 | $15 million | 7.5% | 7 years | $250,000 | $14.75 million |
| ... | ... | ... | ... | ... | ... |

## Tranche Cash Flow Waterfall

| Period | Senior | Mezzanine 1 | Mezzanine 2 | Equity |
|---|---|---|---|---|
| 1 | $9 million | $1 million | $0 | $0 |
| 2 | $10 million | $1.5 million | $0 | $0 |
| ... | ... | ... | ... | ... |

## Tranche Pricing Calculation

| Tranche | Present Value of Cash Flows |
|---|---|
| Senior | $195 million |
| Mezzanine 1 | $90 million |
| Mezzanine 2 | $45 million |
| Equity | $20 million |

## CDS Pricing Model

| Asset/Tranche | Probability of Default | Loss Given Default | CDS Spread |
|---|---|---|---|
| Loan 1 | 2.0% | 50% | 100 bps |
| Senior Tranche | 0.5% | 20% | 10 bps |
| ... | ... | ... | ... |

## Risk Metrics Dashboard

| Metric | Value |
|---|---|
| Weighted Average Default Probability | 1.5% |
| Weighted Average Recovery Rate | 40% |
| Expected Loss | $6 million |
| Senior Tranche Attachment Point | 0% |
| Senior Tranche Detachment Point | 10% |
| ... | ... |

## Developer Notes

### Formulas

* **Present Value:** `PV = CF / (1 + r)^t` (where CF = cash flow, r = discount rate, t = time period)
* **Expected Loss:** `EL = PD * LGD * Notional`
* **CDS Spread:** `Spread = EL / PV(Premium Leg)`

### Future Integrations

* Real-time data feeds
* Advanced credit risk models
* Scenario analysis

### Output Formats

* JSON
* CSV



### Excel (or CSV) with Formulas

### Key Components of the Workbook:
1. **Input Data Sheet**: For users to input their data like tranche sizes, loan details, CDS assumptions, and market interest rates.
2. **Loan Amortization Schedule**: This will automatically calculate the loan payment schedule based on user inputs.
3. **Tranche Cash Flow Waterfall**: Automatically calculates the distribution of cash flows among the CLO tranches.
4. **CDS Pricing**: Based on the user-defined credit risk, loss given default, and other assumptions.
5. **Risk Metrics**: Calculations based on the risk profile and loan/tranche details.

### Structure

#### 1. **Input Data Sheet**

| **Input** | **Description** | **Example** |
|---|---|---|
| CLO Tranches | Define the tranches within the CLO (e.g., Senior, Mezzanine, Equity) | Senior, Mezzanine 1, Mezzanine 2, Equity |
| Tranche Size | Amount of principal for each tranche | $200 million, $100 million, $50 million, $50 million |
| Tranche Coupon | Interest rate paid on each tranche | 4.5%, 6.0%, 8.0%, 12.0% |
| Underlying Assets | Portfolio of leveraged loans backing the CLO |  |
| Loan Details | For each loan: Principal amount, Interest rate, Credit rating, Maturity date | $10 million, 8.0%, B2, 5 years |
| Default Assumptions | Probability of default for each loan | Based on credit ratings and historical data |
| Recovery Rate | Percentage of principal recovered in case of default | Based on historical recovery rates |
| Current Interest Rate | Prevailing market interest rate | 3.5% |
| **Other Assumptions** | E.g., Risk-free rate, Loss Given Default, Default Probability | Based on market data |

#### 2. **Loan Amortization Schedule**

| **Loan ID** | **Principal** | **Interest Rate** | **Maturity** | **Payment** | **Remaining Balance** |
|---|---|---|---|---|---|
| Loan 1 | $10 million | 8.0% | 5 years | Calculated | Automatically calculated |
| Loan 2 | $15 million | 7.5% | 7 years | Calculated | Automatically calculated |

In Excel, we would use **PMT** and **IPMT** functions to calculate the payment and interest amounts. For example:

```excel
=PMT(interest_rate/12, months, principal)
```

```excel
=IPMT(interest_rate/12, period, months, principal)
```

#### 3. **Tranche Cash Flow Waterfall**

| **Period** | **Senior** | **Mezzanine 1** | **Mezzanine 2** | **Equity** |
|---|---|---|---|---|
| 1 | Formula | Formula | Formula | Formula |
| 2 | Formula | Formula | Formula | Formula |

Here, cash flows are calculated based on the waterfall logic. For instance:

1. Start with the total loan payment (or cash inflow).
2. Apply the payments to each tranche sequentially.
3. Each tranche receives its pro-rata share based on size, until exhausted.

We use formulas that subtract the amounts from the remaining cash inflow after each tranche is paid.

#### 4. **CDS Pricing Model**

| **Asset/Tranche** | **Probability of Default** | **Loss Given Default** | **CDS Spread** |
|---|---|---|---|
| Loan 1 | 2% | 50% | Formula |
| Senior Tranche | 0.5% | 20% | Formula |
| ... | ... | ... | ... |

The **CDS Spread** is calculated as:

```excel
=EL / PV(Premium Leg)
```

Where:
- **EL (Expected Loss)** = `PD * (1 - LGD) * Notional`
- **PV (Present Value of Premium Leg)** is calculated using a discount factor based on the market risk-free rate.

#### 5. **Risk Metrics Dashboard**

| **Metric** | **Value** |
|---|---|
| Weighted Average Default Probability | Formula |
| Weighted Average Recovery Rate | Formula |
| Expected Loss | Formula |
| Senior Tranche Attachment Point | Formula |
| Senior Tranche Detachment Point | Formula |

These metrics are derived based on the overall portfolio performance, weighted by the tranche sizes.

### Excel Functions and Calculations:

1. **Loan Amortization (PMT Function)**:
   For each loan, we calculate:
   ```excel
   Payment = PMT(interest_rate / 12, loan_term * 12, loan_amount)
   Interest = IPMT(interest_rate / 12, period, loan_term * 12, loan_amount)
   Principal = Payment - Interest
   Remaining Balance = Previous Balance - Principal
   ```

2. **Tranche Cash Flows (Waterfall Logic)**:
   We calculate the tranche cash flows by sequentially allocating the payments based on tranche sizes and coupon rates:
   ```excel
   Senior Payment = MIN(Tranche Size, Payment * Coupon Rate)
   Mezzanine Payment = MIN(Tranche Size, Payment * Coupon Rate)
   ```

3. **CDS Spread Calculation**:
   The CDS spread is calculated based on the default probability and recovery rates:
   ```excel
   EL = PD * (1 - LGD) * Notional
   CDS Spread = EL / PV(Premium Leg)
   ```

---

### Final Workbook Layout:

| **Input Data** | **Loan Amortization** | **Tranche Cash Flow Waterfall** | **CDS Pricing Model** | **Risk Metrics Dashboard** |
|---|---|---|---|---|
| CLO Tranches | Loan ID | Period | Asset/Tranche | Metric |
| Tranche Sizes | Principal | Payment | Senior | Default Probability |
| Loan Details | Interest Rate | Remaining Balance | Mezzanine 1 | Recovery Rate |
| CDS Assumptions | Maturity |  | Mezzanine 2 | Expected Loss |
| Current Interest Rate |  |  | Equity |  |

---

### How This Works for Users:
- **Input Data**: Users modify values like loan amounts, interest rates, tranche sizes, and CDS assumptions.
- **Automatic Calculation**: When the user changes an input (like a loan amount or default probability), Excel recalculates:
  - The loan amortization schedule.
  - The cash flows for each tranche.
  - The CDS spread for each tranche.
  - The risk metrics.
  
### Deliverables:
1. **Excel Template (CLO_Analyzer.xlsx)**: Contains all the input data, formulas for calculations, and output results.
2. **Sample Output**: The sheet will dynamically generate the amortization schedules, cash flows, CDS spreads, and other metrics.

### Deployment:
This Excel workbook can be placed in a shared repository or a cloud drive, allowing users to download, update their inputs, and instantly view the results. No need for external scripts or running Python â€“ it's entirely self-contained within Excel.

---


#json
{
  "clo_tranches": [
    {"name": "Senior", "size": 200000000, "coupon": 0.045},
    {"name": "Mezzanine 1", "size": 100000000, "coupon": 0.060},
    {"name": "Mezzanine 2", "size": 50000000, "coupon": 0.080},
    {"name": "Equity", "size": 50000000, "coupon": 0.120}
  ],
  "underlying_assets": [
    {
      "loan_id": "Loan 1",
      "principal": 10000000,
      "interest_rate": 0.080,
      "credit_rating": "B2",
      "maturity": 5,
      "probability_of_default": 0.02,
      "recovery_rate": 0.50
    },
    {
      "loan_id": "Loan 2",
      "principal": 15000000,
      "interest_rate": 0.075,
      "credit_rating": "B1",
      "maturity": 7,
      "probability_of_default": 0.015,
      "recovery_rate": 0.45
    }
  ],
  "market_conditions": {
    "current_interest_rate": 0.035
  },
  "loan_amortization_schedule": [
    {"loan_id": "Loan 1", "payment": 200000, "remaining_balance": 9800000},
    {"loan_id": "Loan 2", "payment": 250000, "remaining_balance": 14750000}
  ],
  "cds_pricing": [
    {
      "asset_tranche": "Loan 1",
      "probability_of_default": 0.02,
      "loss_given_default": 0.50,
      "cds_spread": 100
    },
    {
      "asset_tranche": "Senior Tranche",
      "probability_of_default": 0.005,
      "loss_given_default": 0.20,
      "cds_spread": 10
    }
  ],
  "risk_metrics": {
    "weighted_average_default_probability": 0.015,
    "weighted_average_recovery_rate": 0.40,
    "expected_loss": 6000000,
    "senior_tranche_attachment_point": 0,
    "senior_tranche_detachment_point": 0.10
  }
}

#python
import json

# Load the JSON file
with open('clo_analyzer.json', 'r') as f:
    data = json.load(f)

# Function to calculate loan amortization (simple example)
def calculate_amortization(principal, interest_rate, years):
    monthly_rate = interest_rate / 12
    months = years * 12
    payment = principal * (monthly_rate / (1 - (1 + monthly_rate) ** -months))
    amortization_schedule = []
    balance = principal
    
    for month in range(1, months + 1):
        interest_payment = balance * monthly_rate
        principal_payment = payment - interest_payment
        balance -= principal_payment
        amortization_schedule.append({
            "month": month,
            "payment": round(payment, 2),
            "interest_payment": round(interest_payment, 2),
            "principal_payment": round(principal_payment, 2),
            "remaining_balance": round(balance, 2)
        })
    
    return amortization_schedule

# Example of processing one loan
loan_1 = data['underlying_assets'][0]  # Loan 1 data
amortization_schedule = calculate_amortization(
    loan_1['principal'], loan_1['interest_rate'], loan_1['maturity']
)

# Print amortization schedule
for entry in amortization_schedule:
    print(f"Month {entry['month']}: Payment: {entry['payment']}, Interest: {entry['interest_payment']}, Principal: {entry['principal_payment']}, Remaining Balance: {entry['remaining_balance']}")
